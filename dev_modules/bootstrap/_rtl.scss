// For Right To Left Bootstrap 4.1 By AmirHossein Abdollahzadeh
html[dir="rtl"] body {
  text-align: right;
  direction: rtl;

  // .nav {
  //   padding-right: 0;
  // }

  .navbar-nav .nav-item {
    float: right;
    + .nav-item {
      margin-right: $custom-control-spacer-x;
      margin-left: inherit;
    }
  }

  // .navbar-nav .nav-item + .nav-item {
  //   margin-right: 1rem;
  //   margin-left: inherit;
  // }

  // th {
  //   text-align: right;
  // }

  .alert-dismissible {
    padding-right: 1.25rem;
    padding-left: 4rem;
  }

  .dropdown-menu {
    // right: 0;
    text-align: right;
  }

  .checkbox label {
    padding-right: $custom-control-gutter + $custom-control-indicator-size;
    padding-left: inherit;
  }

  .btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {
    border-radius: 0 $border-radius $border-radius 0;
  }

  .btn-group > .btn:last-child:not(:first-child),
  .btn-group > .dropdown-toggle:not(:first-child),
  .btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child  {
    border-radius: $border-radius 0 0 $border-radius;
  }

  // .btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {
  //   border-radius: $border-radius 0 0 $border-radius;
  // }
  .custom-control-label::after,
  .custom-control-label::before {
    right: -($custom-control-gutter + $custom-control-indicator-size);
    left: inherit;
  }

  .custom-select {
    // padding: $custom-select-padding-y $custom-select-padding-x
    //   $custom-select-padding-y
    //   ($custom-select-padding-x + $custom-select-indicator-padding);
    background: $custom-select-bg $custom-select-indicator no-repeat left
      $custom-select-padding-x center;
    background-size: $custom-select-bg-size;
  }

  .input-group
    > .input-group-append:last-child
    > .btn:not(:last-child):not(.dropdown-toggle),
  .input-group
    > .input-group-append:last-child
    > .input-group-text:not(:last-child),
  .input-group > .input-group-append:not(:last-child) > .btn,
  .input-group > .input-group-append:not(:last-child) > .input-group-text,
  .input-group > .input-group-prepend > .btn,
  .input-group > .input-group-prepend > .input-group-text {
    border-radius: 0 $border-radius $border-radius 0;
  }

  .input-group > .input-group-append > .btn,
  .input-group > .input-group-append > .input-group-text,
  .input-group > .input-group-prepend:first-child > .btn:not(:first-child),
  .input-group
    > .input-group-prepend:first-child
    > .input-group-text:not(:first-child),
  .input-group > .input-group-prepend:not(:first-child) > .btn,
  .input-group > .input-group-prepend:not(:first-child) > .input-group-text {
    border-radius: $border-radius 0 0 $border-radius;
  }

  .input-group > .custom-select:not(:first-child),
  .input-group > .form-control:not(:first-child) {
    border-radius: $border-radius 0 0 $border-radius;
  }

  .input-group > .custom-select:not(:last-child),
  .input-group > .form-control:not(:last-child) {
    border-radius: 0 $border-radius $border-radius 0;
  }

  .input-group > .custom-select:not(:last-child):not(:first-child),
  .input-group > .form-control:not(:last-child):not(:first-child) {
    border-radius: 0;
  }

  .custom-control {
    padding-right: $custom-control-gutter + $custom-control-indicator-size;
    padding-left: inherit;
    // margin-right: inherit;
    // margin-left: 1rem;
    // display: flex;
    // align-items: center;
  }

  .custom-control-indicator {
    right: 0;
    left: inherit;
  }

  .custom-file-label::after {
    right: initial;
    left: -1px;
    border-radius: 0.25rem 0 0 0.25rem;
  }

  .radio input,
  .radio-inline,
  .checkbox input,
  .checkbox-inline input {
    margin-right: -1.25rem;
    margin-left: inherit;
  }

  // .list-group {
  //   padding-right: 0;
  //   padding-left: 40px;
  // }

  .close {
    float: left;
  }

  .modal-header .close {
    margin: -15px auto -15px -15px;
  }

  .modal-footer > :not(:first-child) {
    margin-right: 0.25rem;
  }

  .alert-dismissible .close {
    right: inherit;
    left: 0;
  }

  .dropdown-toggle::after {
    margin-right: 0.255em;
    margin-left: 0;
  }

  .form-check-input {
    margin-right: -1.5rem;
    margin-left: inherit;
  }

  .form-check-label {
    padding-right: 1.5rem;
    padding-left: inherit;
  }

  .page-item {
    &:first-child {
      .page-link {
        @include border-right-radius($border-radius);
        @include border-left-radius(inherit);
      }
    }
    &:last-child {
      .page-link {
        @include border-left-radius($border-radius);
        @include border-right-radius(inherit);
      }
    }
  }

  .breadcrumb-item {
    + .breadcrumb-item {
      padding-right: $breadcrumb-item-padding;
      padding-left: 0;
      &::before {
        padding-left: $breadcrumb-item-padding;
        padding-right: 0;
      }
    }
  }

  .progress-bar-striped {
    @include gradient-striped($color: rgba($white, 0.15), $angle: -45deg);
  }

  @mixin make-col-offset($size, $columns: $grid-columns) {
    $num: $size / $columns;
    margin-right: if($num == 0, 0, percentage($num));
    margin-left: 0;
  }

  @mixin make-grid-columns(
    $columns: $grid-columns,
    $gutter: $grid-gutter-width,
    $breakpoints: $grid-breakpoints
  ) {
    @each $breakpoint in map-keys($breakpoints) {
      $infix: breakpoint-infix($breakpoint, $breakpoints);
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        @for $i from 0 through ($columns - 1) {
          @if not($infix == "" and $i == 0) {
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
  @if $enable-grid-classes {
    @include make-grid-columns();
  }

  // stylelint-disable declaration-no-important
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      @each $prop, $abbrev in (margin: m, padding: p) {
        @each $size, $length in $spacers {
          .#{$abbrev}r#{$infix}-#{$size} {
            #{$prop}-right: $length !important;
            #{$prop}-left: inherit !important;
          }
          .#{$abbrev}l#{$infix}-#{$size} {
            #{$prop}-left: $length !important;
            #{$prop}-right: inherit !important;
          }

          .#{$abbrev}x#{$infix}-#{$size} {
            #{$prop}-left: $length !important;
            #{$prop}-right: $length !important;
          }
        }
      }

      .ml#{$infix}-auto {
        margin-right: 0 !important;
        margin-left: auto !important;
      }
      .mr#{$infix}-auto {
        margin-right: auto !important;
        margin-left: 0 !important;
      }

      .mx#{$infix}-auto {
        margin-right: auto !important;
        margin-left: auto !important;
      }
    }
  }

  .card-group {
    @include media-breakpoint-up(sm) {
      > .card {
        // Handle rounded corners
        @if $enable-rounded {
          &:first-child {
            @include border-left-radius(0);

            @include border-right-radius($card-border-radius);

            .card-img-top,
            .card-header {
              border-top-left-radius: 0;
              border-top-right-radius: $card-border-radius;
            }
            .card-img-bottom,
            .card-footer {
              border-bottom-left-radius: 0;
              border-bottom-right-radius: $card-border-radius;
            }
          }

          &:last-child {
            @include border-right-radius(0);

            @include border-left-radius(0);

            .card-img-top,
            .card-header {
              border-top-right-radius: 0;
              border-top-left-radius: $card-border-radius;
            }
            .card-img-bottom,
            .card-footer {
              border-bottom-right-radius: 0;
              border-bottom-left-radius: $card-border-radius;
            }
          }
        }
      }
    }
  }

  
.custom-switch {
  padding-left: 0;
  padding-right: $custom-switch-width + $custom-control-gutter;
  
  .custom-control-label {
    &::before {
      left: 0;
      right: -($custom-switch-width + $custom-control-gutter);
    }

    &::after {
      left: 0;
      right: calc(#{-($custom-switch-width + $custom-control-gutter)} + #{$custom-control-indicator-border-width * 2});
    }
  }

  .custom-control-input:checked ~ .custom-control-label {
    &::after {
      transform: translateX(-($custom-switch-width - $custom-control-indicator-size));
    }
  }

  .custom-control-input:disabled {
    &:checked ~ .custom-control-label::before {
      background-color: $custom-control-indicator-checked-disabled-bg; //rgba(23, 64, 122, 0.5)
    }
  }
}

}
